@inject ILogger<MultiAssetSelector> _logger

@if (AssetList is not null)
{
    @if (AssetList.Count == 0)
    {
        <div class="text-warning">No available assets to select from.</div>
    }
    else
    {
        <div class="mb-1">
            Apparently Blazor and Bootstrap both do not have a normal looking multiselect widget out of the box.
            So I'll have to work with this for now. Hold Ctrl down to select multiple assets.
        </div>
        <EditForm EditContext="editContext"
                  OnValidSubmit="HandleInputSelectionChange"
                  FormName="AssetSelectorForm"
                  multiple>
            <div>
                <label>
                    <InputSelect @bind-Value="SelectedAssets">
                        @foreach (var item in AssetList)
                        {
                            <option value="@item.Ticker">@item.Name</option>
                        }
                    </InputSelect>
                </label>
            </div>
            <div>
                <button type="submit">Use this selection</button>
            </div>
        </EditForm>

        <p>this is still inside the Multiselect Component</p>
        <ul>
        @foreach (var item in SelectedAssets)
        {
            <li>@item</li>
        }
        </ul>
        <p>this is still inside the Multiselect Component</p>
    }

}
else
{
    <div class="text-warning">There are no available assets to select from. </div>
}

@code {
    [Parameter]
    public EventCallback<string[]> ValueChanged { get; set; }

    [CascadingParameter(Name = "AssetList")]
    public List<AssetGetDtoList> AssetList { get; set; }

    private EditContext? editContext;

    [SupplyParameterFromForm]
    private string[] SelectedAssets { get; set; } = [];


    protected override void OnInitialized()
    {
        editContext = new(SelectedAssets);
    }

    private void HandleInputSelectionChange()
    {
        if (SelectedAssets.Length > 1)
        {
            ValueChanged.InvokeAsync(SelectedAssets);
        }
    }
}
