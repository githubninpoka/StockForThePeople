@inject ILogger<MultiAssetSelector> _logger

@if (AssetList is not null)
{
    @if (AssetList.Count == 0)
    {
        <div class="text-warning">wtf</div>
    }
    else
    {
        <div>
            <InputSelect 
            class="btn btn-secondary dropdown-toggle" @bind-Value="blaat"  multiple
            >
                @foreach (var option in AssetList)
                {
                    <option value="@option.Ticker">@option.Name</option>
                }
            </InputSelect>
        </div>
        <br />
        <div>
            <select class="form-select" multiple aria-label="multiple select example">
                <option selected>Open this select menu</option>
                <option value="1">One</option>
                <option value="2">Two</option>
                <option value="3">Three</option>
            </select>
        </div>
        <br />
        @*         <div>
            <select class="form-select" aria-label="Default select example">
                <option selected>Open this select menu</option>
                <option value="1">One</option>
                <option value="2">Two</option>
                <option value="3">Three</option>
            </select>
        </div> *@
        <br />
    }

}
else
{
    <div class="text-warning">There are no available assets to select from. (check why the values became unavailable after switch from server to webasembly.)</div>
    <button type="button" @onclick="HandleButtonClick">Refresh</button>
}

@code {
    [CascadingParameter(Name = "AssetList")]
    public List<AssetGetDtoList> AssetList { get; set; }

    [Parameter]
    public string SelectedAssetTicker { get; set; }

    public List<string> blaat = new();

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private async Task HandleInputSelectSelectionChange()
    {
        _logger.LogInformation("Invoking a callback");
        await ValueChanged.InvokeAsync(SelectedAssetTicker);
    }
    private void HandleButtonClick(MouseEventArgs e)
    {
        _logger.LogInformation("Items: {var}", AssetList.Count);
    }
}
