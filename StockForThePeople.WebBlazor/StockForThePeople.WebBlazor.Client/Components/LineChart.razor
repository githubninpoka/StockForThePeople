@inject IJSRuntime JSRuntime
@inject ILogger<LineChart> _logger
@implements IDisposable

<canvas id="@Id"></canvas>

@code {
    public enum ChartType
    {
        Pie,
        Bar,
        Line
    }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public ChartType Type { get; set; }

    [Parameter]
    public string[] Data { get; set; }

    [Parameter]
    public string[] BackgroundColor { get; set; }

    [Parameter]
    public string[] Labels { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Here we create an anonymous type with all the options
            // that need to be sent to Chart.js
            var config = new
            {
                Type = Type.ToString().ToLower(),
                Options = new
                {
                    plugins = new
                    {
                        Title = new
                        {
                            Text = "Deze",
                            Display = true
                        }
                    },
                    Responsive = true,
                    Scales = new
                    {
                        YAxis = new
                        {
                            Title = new { Display = true, Text = "Blaaat" },
                            //Max = 40,
                            Display = true,
                            BackgroundColor = "#9BD0F5",
                            Text = "Whever",
                            Ticks = new
                            {
                                BeginAtZero = true,
                                StepSize = 0.2
                            }
                        },
                        Y = new
                        {
                            Display = false
                        }

                    }
                },
                Data = new
                {
                    Datasets = new[]
                    {

                    new {
                        Data = Data,
                        BorderColor = BackgroundColor,
                        Stepped = "middle",
                        YAxisId = "YAxis",
                        Text = "Dan deze",
                        Label = "Dit Label"
                    }
                },
                    Labels = Labels
                }
            };

            _logger.LogInformation("{var1} - {var2} - Available Data inside the component: {var3}", nameof(LineChart), nameof(OnAfterRenderAsync), Data[0]);
            _logger.LogInformation("The Id for the canvas is {var1}", Id);
            // with Chart.js and blazor you really only want to new up a chart
            // after first render.
            // also removal can be done right before newing up.
            await JSRuntime.InvokeVoidAsync("clean");
            await JSRuntime.InvokeVoidAsync("setup", Id, config);
        }
    }

    public async void Dispose()
    {

        // Call JavaScript to destroy the chart
        await JSRuntime.InvokeVoidAsync("dispose");

    }
}
