@inject IJSRuntime JSRuntime
@inject ILogger<LineChart> _logger

<canvas id="@Id"></canvas>

@code {
    public enum ChartType
    {
        Pie,
        Bar,
        Line
    }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public ChartType Type { get; set; }

    [Parameter]
    public string[] Data { get; set; }

    [Parameter]
    public string[] BackgroundColor { get; set; }

    [Parameter]
    public string[] Labels { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Here we create an anonymous type with all the options
        // that need to be sent to Chart.js
        var config = new
        {
            Type = Type.ToString().ToLower(),
            Options = new
            {
                Responsive = true,
                Scales = new
                {
                    YAxes = new[]
                    {
                        new { Ticks = new {
                            BeginAtZero=true
                        } }
                    }
                }
            },
            Data = new
            {
                Datasets = new[]
                {
                    new { Data = Data, BorderColor = BackgroundColor, Stepped = "middle"}
                },
                Labels = Labels
            }
        };

        _logger.LogInformation("{var1} - {var2} - Available Data: {var3}",nameof(LineChart), nameof(OnAfterRenderAsync), Data[0]);

        await JSRuntime.InvokeVoidAsync("setup", Id, config);
    }
}
