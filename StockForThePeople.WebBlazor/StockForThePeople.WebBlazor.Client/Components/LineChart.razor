@inject IJSRuntime JSRuntime
@inject ILogger<LineChart> _logger

@* a chart needs a canvas *@
<canvas id="@Id"></canvas>

@code {

    [Parameter]
    public LineChartConfiguration? LineChartConfiguration { get; set; }

    [Parameter]
    public string Id { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("reset");

        // Here we create an anonymous type with all the options
        // that need to be sent to Chart.js
        if (LineChartConfiguration is not null)
        {
            var _dataSets = new object[LineChartConfiguration.Data.DataSets.Length] ;
            for (int i = 0; i < LineChartConfiguration.Data.DataSets.Length; i ++)
            {
                // the stepped property in chart.js can be bool or string.
                // thankfully in C# it can be made to work by providing an object type.
                object stepType = string.IsNullOrEmpty(LineChartConfiguration.Data.DataSets[i].Stepped)
                    ? false
                    : LineChartConfiguration.Data.DataSets[i].Stepped!;

                object pointStyle = string.IsNullOrEmpty(LineChartConfiguration.Data.DataSets[i].PointStyle)
                    ? false
                    : LineChartConfiguration.Data.DataSets[i].PointStyle!;

                _dataSets[i] = new
                {
                    data = LineChartConfiguration.Data.DataSets[i].Data,
                    borderColor = LineChartConfiguration.Data.DataSets[i].BorderColor,
                    yAxisID= LineChartConfiguration.Data.DataSets[i].YAxisId,
                    label= LineChartConfiguration.Data.DataSets[i].Label,
                    stepped = stepType,
                    fill = LineChartConfiguration.Data.DataSets[i].Fill,
                    //borderDash = new[] { 5, 15}
                    borderWidth= 1,
                    pointStyle = pointStyle

                };
            }
            var config = new
            {
                type = LineChartConfiguration.Type,
                options = new
                {
                    plugins = new
                    {
                        Title = new
                        {
                            Text = LineChartConfiguration.LineChartOptions.ChartTitle,
                            Display = string.IsNullOrEmpty(LineChartConfiguration.LineChartOptions.ChartTitle) 
                            ? false  
                            : true
        }
                    },
                    responsive = LineChartConfiguration.LineChartOptions.Responsive,

                    scales = new
                    {
                        leftaxis = LineChartConfiguration.LineChartOptions.Scales.LeftAxis,
                        rightaxis = LineChartConfiguration.LineChartOptions.Scales.RightAxis
                    }
                },
                data = new
                {
                    labels = LineChartConfiguration.Data.Labels.Labels,
                    datasets = _dataSets,

                }
            };
            _logger.LogInformation("HIERO");
            await JSRuntime.InvokeVoidAsync("setup", Id, config);

        }
    }

}
