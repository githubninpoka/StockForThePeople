@page "/MonthlyHighLowPerAsset"
@page "/"

@inject IWebApiExecuter _api
@inject StockForThePeopleSettings _stockForThePeopleSettings
@inject ILogger<MonthlyHighLowPerAsset> _logger

<div>
    <h3>Volumes versus verschil HighLow per dag</h3>
    De gedachte is: er moet een herleidbaar verband zijn tussen het verschil in High en Low van een aandeel en de hoeveelheid verhandelde aandelen
    <div class="alert alert-danger" role="alert">Dit wordt high/low maar is het nu nog niet, verder is het nu een periode van 60 dagen</div>

    <AssetSelector ValueChanged="SelectedTickerHandler" />

    @if (volumes is not null && selectedTicker is not null)
    {
        <div class="d-inline-flex" style="height:600px;border-style:solid;border-width:thin;border-color:black">
            <LineChart Id=0 LineChartConfiguration="lineChartConfiguration">
            </LineChart>
        </div>
    }
</div>

@code {
    private LineChartConfiguration lineChartConfiguration;

    private AssetWithMarketGetDto singleAssetWithMarketData;
    private double[] volumes;
    private double[] values;
    private string[] dates;
    private double[] volumeBaseLine;

    [Parameter]
    public string selectedTicker { get; set; }

    private string basicUri;
    private string fullUri;

    private async Task SelectedTickerHandler(string selected)
    {

        selectedTicker = selected;
        fullUri = basicUri + selected;
        List<double> volumesList = new();
        List<string> datesList = new();
        List<double> valuesList = new();

        if (fullUri is not null)
        {
            _logger.LogInformation("calling elvis");
            _api.BaseUrl = _stockForThePeopleSettings.BaseUrl;

            singleAssetWithMarketData = await _api.InvokeGetAsync<AssetWithMarketGetDto>(fullUri);
            foreach (var item in singleAssetWithMarketData.MarketHistory)
            {
                volumesList.Add(Math.Round(item.VolumeComparedToAverage / 100, 1));
                valuesList.Add((double)item.Value);
                datesList.Add(item.Date.ToString());
            }
            volumes = volumesList.ToArray();
            values = valuesList.ToArray();
            dates = datesList.ToArray();
            volumeBaseLine = new double[volumes.Length];
            Array.Fill(volumeBaseLine, 1);
        }
        lineChartConfiguration = new LineChartConfiguration()
            {
                LineChartOptions = new LineChartOptions()
                {
                    ChartTitle = $"Dit gaat over {singleAssetWithMarketData.Asset.Name}",
                    Responsive = true,
                    Scales = new ChartAxes()
                    {
                        LeftAxis = new ChartAxis()
                        {
                            Title = new ChartAxisTitle()
                            {
                                Text = "Dagvolume",
                                Display = true
                            },
                            Display = true,
                            BeginAtZero = true,
                            Grid = new ChartAxisGrid()
                            {
                                Display = true
                            }
                        },
                        RightAxis = new ChartAxis()
                        {
                            Title = new ChartAxisTitle()
                            {
                                Text = "Waarde",
                                Display = true
                            },
                            Display = true,
                            Position = "right",
                            BeginAtZero = false,
                            Min = values.Min() - 1,
                            Max = values.Max() + 1,
                            Grid = new ChartAxisGrid()
                            {
                                Display = false
                            }
                        }
                    }
                },
                Data = new ChartDataSets()
                {
                    DataSets = new ChartDataSet[] {
                        new ChartDataSet(){
                            Data = volumeBaseLine,
                            BorderColor="rgba(255,0,0,1)",
                            YAxisId="leftaxis",
                            Label="Gemiddeld maandvolume"
                        },
                        new ChartDataSet(){
                            Data=volumes,
                            BorderColor="grey",
                            Stepped="middle",
                            YAxisId="leftaxis",
                            Label="Volumes",
                            Fill = true,
                            PointStyle = "dash"
                        },
                        new ChartDataSet(){
                            Data=values,
                            BorderColor="green",
                            Stepped="",
                            YAxisId="rightaxis",
                            Label="Waardes"
                        }

                    },
                    Labels = new LineChartLabels()
                    {
                        Labels = dates
                    }

                }

            };
    }

    protected override async Task OnInitializedAsync()
    {
        _api.BaseUrl = _stockForThePeopleSettings.BaseUrl;
        basicUri = _stockForThePeopleSettings.MarketByTickerUri;
    }

}