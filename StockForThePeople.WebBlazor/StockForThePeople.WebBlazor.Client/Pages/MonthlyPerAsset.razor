@page "/MonthlyPerAsset"
@inject IWebApiExecuter _api
@inject StockForThePeopleSettings _stockForThePeopleSettings


<h3>Volume Growth and Shrinking per day</h3>

<AssetSelector ValueChanged="SelectedTickerHandler">
</AssetSelector>

@if (volumes is not null && selectedTicker is not null)
{
    <div class="d-inline-flex" style="border-style:dotted;border-width:thick;border-color:cyan;height:600px">
        <LineChart Id=0 Type="@LineChart.ChartType.Line"
        Data="volumes"
        BackgroundColor="lineColors"
        Labels="dates">
        </LineChart>
    </div>
}

@if (selectedTicker is not null)
{
    <div class="text-warning">By the power of greyskull: @selectedTicker </div>
}

@code {
    public List<MarketDto> MarketList { get; set; } = new();

    private string[] volumes;
    private string[] lineColors = { "green" };
    private string[] dates;
    

    [Parameter]
    public string selectedTicker { get; set; }

    private string basicUri;
    private string fullUri;

    private async Task SelectedTickerHandler(string selected)
    {
        volumes = null;
        StateHasChanged();

        selectedTicker = selected;
        fullUri = basicUri + selected;
        List<string> volumesList = new();
        List<string> datesList = new();
        if (fullUri is not null)
        {
            _api.BaseUrl = _stockForThePeopleSettings.BaseUrl;
            var x = await _api.InvokeGetAsync<AssetWithMarketGetDto>(fullUri);
            foreach (var item in x.MarketHistory)
            {
                volumesList.Add(Math.Round(item.VolumeComparedToAverage / 100, 1).ToString());
                datesList.Add(item.Date.ToString());
                MarketList.Add(new MarketDto()
                    {
                        Date = item.Date,
                        Value = item.Value,
                        Volume = item.Volume,
                        VolumeDeviation = item.VolumeComparedToAverage
                    });
                volumes = volumesList.ToArray();
                dates = datesList.ToArray();
                

            }
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _api.BaseUrl = _stockForThePeopleSettings.BaseUrl;
        basicUri = _stockForThePeopleSettings.MarketByTickerUri;
    }

}