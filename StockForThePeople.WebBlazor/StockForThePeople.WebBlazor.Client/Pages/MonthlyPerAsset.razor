@page "/MonthlyPerAsset"

@using System.Globalization
@inject IWebApiExecuter _api
@inject StockForThePeopleSettings _stockForThePeopleSettings
@inject ILogger<MonthlyPerAsset> _logger

<h3>Volumes versus Koers per dag</h3>
De gedachte is: er moet een herleidbaar verband zijn tussen de koerstontwikkeling van een aandeel en de hoeveelheid verhandelde aandelen.
Nou, dat is dus niet zomaar overduidelijk te zien.

<AssetSelector ValueChanged="SelectedTickerHandler" />

@if (volumes is not null && selectedTicker is not null)
{
    <div class="d-inline-flex" style="border-style:dotted;border-width:thick;border-color:cyan;height:600px">
        <XLineChart Id=0 Type="@XLineChart.ChartType.Line"
                    AssetName=@singleAssetWithMarketData.Asset.Name
                   Volumes="volumes"
                   Values="values"
                   Labels="dates">
        </XLineChart>
    </div>
}

@code {
    private AssetWithMarketGetDto singleAssetWithMarketData;
    private double[] volumes;
    private double[] values;
    private string[] dates;

    [Parameter]
    public string selectedTicker { get; set; }

    private string basicUri;
    private string fullUri;

    private async Task SelectedTickerHandler(string selected)
    {

        selectedTicker = selected;
        fullUri = basicUri + selected;
        List<double> volumesList = new();
        List<string> datesList = new();
        List<double> valuesList = new();

        if (fullUri is not null)
        {
            _logger.LogInformation("calling elvis");
            _api.BaseUrl = _stockForThePeopleSettings.BaseUrl;
            
            singleAssetWithMarketData = await _api.InvokeGetAsync<AssetWithMarketGetDto>(fullUri);
            foreach (var item in singleAssetWithMarketData.MarketHistory)
            {
                //volumesList.Add(Math.Round(item.VolumeComparedToAverage / 100, 1).ToString(CultureInfo.CreateSpecificCulture("en-US")));
                volumesList.Add(Math.Round(item.VolumeComparedToAverage / 100, 1));
                //valuesList.Add(item.Value.ToString(CultureInfo.CreateSpecificCulture("en-US")));
                valuesList.Add((double)item.Value);
                datesList.Add(item.Date.ToString());
            }
            volumes = volumesList.ToArray();
            values = valuesList.ToArray();
            dates = datesList.ToArray();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _api.BaseUrl = _stockForThePeopleSettings.BaseUrl;
        basicUri = _stockForThePeopleSettings.MarketByTickerUri;
    }

}